<?php

namespace {{ namespace }};

use Ikoncept\Fabriq\Http\Requests\Create{{ model }}Request;
use Ikoncept\Fabriq\Http\Requests\Update{{ model }}Request;
use Ikoncept\Fabriq\Models\{{ model }};
use Ikoncept\Fabriq\Transformers\{{ model }}Transformer;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Infab\Core\Http\Controllers\Api\ApiController;
use Spatie\QueryBuilder\AllowedFilter;
use Spatie\QueryBuilder\QueryBuilder;

class {{ class }} extends ApiController
{
    public function index() : JsonResponse
    {
        $eagerLoad = $this->getEagerLoad({{ model }}::RELATIONSHIPS);
        ${{ modelVariable }} = QueryBuilder::for({{ model }}::class)
            ->allowedSorts(['name', 'updated_at', 'publishes_at'])
            ->allowedFilters([
                AllowedFilter::scope('search'),
                AllowedFilter::scope('published')
            ])
            ->with($eagerLoad)
            ->paginate($this->number);

        return $this->respondWithPaginator(${{ modelVariable }}, new {{ model }}Transformer());
    }

    public function show(Request $request, int $id) : JsonResponse
    {
        $eagerLoad = $this->getEagerLoad({{ model }}::RELATIONSHIPS);
        ${{ modelVariable }} = {{ model }}::where('id', $id)
            ->with($eagerLoad)
            ->firstOrFail();

        return $this->respondWithItem(${{ modelVariable }}, new {{ model }}Transformer());
    }

    public function store(Create{{ model }}Request $request) : JsonResponse
    {
        ${{ modelVariable }} = new {{ model }}();
        ${{ modelVariable }}->fill($request->validated());
        ${{ modelVariable }}->template_id = 2;
        ${{ modelVariable }}->save();

        return $this->respondWithItem(${{ modelVariable }}, new {{ model }}Transformer, 201);
    }

    public function update(Update{{ model }}Request $request, int $id) : JsonResponse
    {
        ${{ modelVariable }} = {{ model }}::findOrFail($id);
        ${{ modelVariable }}->fill($request->validated());
        ${{ modelVariable }}->updateContent($request->content);
        ${{ modelVariable }}->save();

        return $this->respondWithItem(${{ modelVariable }}, new {{ model }}Transformer());
    }

    public function destroy(int $id) : JsonResponse
    {
        ${{ modelVariable }} = {{ model }}::findOrFail($id);
        ${{ modelVariable }}->delete();

        return $this->respondWithSuccess('{{ model }} deleted successfully');
    }
}
